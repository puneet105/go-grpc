// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: proto/employee.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EmployeeService_CreateEmployee_FullMethodName         = "/employee_service.EmployeeService/CreateEmployee"
	EmployeeService_CreateMultipleEmployee_FullMethodName = "/employee_service.EmployeeService/CreateMultipleEmployee"
	EmployeeService_GetEmployee_FullMethodName            = "/employee_service.EmployeeService/GetEmployee"
)

// EmployeeServiceClient is the client API for EmployeeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmployeeServiceClient interface {
	CreateEmployee(ctx context.Context, in *EmployeeRequest, opts ...grpc.CallOption) (*EmployeeResponse, error)
	CreateMultipleEmployee(ctx context.Context, opts ...grpc.CallOption) (EmployeeService_CreateMultipleEmployeeClient, error)
	GetEmployee(ctx context.Context, in *NoParams, opts ...grpc.CallOption) (EmployeeService_GetEmployeeClient, error)
}

type employeeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmployeeServiceClient(cc grpc.ClientConnInterface) EmployeeServiceClient {
	return &employeeServiceClient{cc}
}

func (c *employeeServiceClient) CreateEmployee(ctx context.Context, in *EmployeeRequest, opts ...grpc.CallOption) (*EmployeeResponse, error) {
	out := new(EmployeeResponse)
	err := c.cc.Invoke(ctx, EmployeeService_CreateEmployee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) CreateMultipleEmployee(ctx context.Context, opts ...grpc.CallOption) (EmployeeService_CreateMultipleEmployeeClient, error) {
	stream, err := c.cc.NewStream(ctx, &EmployeeService_ServiceDesc.Streams[0], EmployeeService_CreateMultipleEmployee_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &employeeServiceCreateMultipleEmployeeClient{stream}
	return x, nil
}

type EmployeeService_CreateMultipleEmployeeClient interface {
	Send(*EmployeeRequest) error
	Recv() (*EmployeeResponse, error)
	grpc.ClientStream
}

type employeeServiceCreateMultipleEmployeeClient struct {
	grpc.ClientStream
}

func (x *employeeServiceCreateMultipleEmployeeClient) Send(m *EmployeeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *employeeServiceCreateMultipleEmployeeClient) Recv() (*EmployeeResponse, error) {
	m := new(EmployeeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *employeeServiceClient) GetEmployee(ctx context.Context, in *NoParams, opts ...grpc.CallOption) (EmployeeService_GetEmployeeClient, error) {
	stream, err := c.cc.NewStream(ctx, &EmployeeService_ServiceDesc.Streams[1], EmployeeService_GetEmployee_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &employeeServiceGetEmployeeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EmployeeService_GetEmployeeClient interface {
	Recv() (*EmployeeRequest, error)
	grpc.ClientStream
}

type employeeServiceGetEmployeeClient struct {
	grpc.ClientStream
}

func (x *employeeServiceGetEmployeeClient) Recv() (*EmployeeRequest, error) {
	m := new(EmployeeRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EmployeeServiceServer is the server API for EmployeeService service.
// All implementations must embed UnimplementedEmployeeServiceServer
// for forward compatibility
type EmployeeServiceServer interface {
	CreateEmployee(context.Context, *EmployeeRequest) (*EmployeeResponse, error)
	CreateMultipleEmployee(EmployeeService_CreateMultipleEmployeeServer) error
	GetEmployee(*NoParams, EmployeeService_GetEmployeeServer) error
	mustEmbedUnimplementedEmployeeServiceServer()
}

// UnimplementedEmployeeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEmployeeServiceServer struct {
}

func (UnimplementedEmployeeServiceServer) CreateEmployee(context.Context, *EmployeeRequest) (*EmployeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmployee not implemented")
}
func (UnimplementedEmployeeServiceServer) CreateMultipleEmployee(EmployeeService_CreateMultipleEmployeeServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateMultipleEmployee not implemented")
}
func (UnimplementedEmployeeServiceServer) GetEmployee(*NoParams, EmployeeService_GetEmployeeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetEmployee not implemented")
}
func (UnimplementedEmployeeServiceServer) mustEmbedUnimplementedEmployeeServiceServer() {}

// UnsafeEmployeeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmployeeServiceServer will
// result in compilation errors.
type UnsafeEmployeeServiceServer interface {
	mustEmbedUnimplementedEmployeeServiceServer()
}

func RegisterEmployeeServiceServer(s grpc.ServiceRegistrar, srv EmployeeServiceServer) {
	s.RegisterService(&EmployeeService_ServiceDesc, srv)
}

func _EmployeeService_CreateEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).CreateEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_CreateEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).CreateEmployee(ctx, req.(*EmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_CreateMultipleEmployee_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EmployeeServiceServer).CreateMultipleEmployee(&employeeServiceCreateMultipleEmployeeServer{stream})
}

type EmployeeService_CreateMultipleEmployeeServer interface {
	Send(*EmployeeResponse) error
	Recv() (*EmployeeRequest, error)
	grpc.ServerStream
}

type employeeServiceCreateMultipleEmployeeServer struct {
	grpc.ServerStream
}

func (x *employeeServiceCreateMultipleEmployeeServer) Send(m *EmployeeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *employeeServiceCreateMultipleEmployeeServer) Recv() (*EmployeeRequest, error) {
	m := new(EmployeeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EmployeeService_GetEmployee_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NoParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EmployeeServiceServer).GetEmployee(m, &employeeServiceGetEmployeeServer{stream})
}

type EmployeeService_GetEmployeeServer interface {
	Send(*EmployeeRequest) error
	grpc.ServerStream
}

type employeeServiceGetEmployeeServer struct {
	grpc.ServerStream
}

func (x *employeeServiceGetEmployeeServer) Send(m *EmployeeRequest) error {
	return x.ServerStream.SendMsg(m)
}

// EmployeeService_ServiceDesc is the grpc.ServiceDesc for EmployeeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmployeeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "employee_service.EmployeeService",
	HandlerType: (*EmployeeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEmployee",
			Handler:    _EmployeeService_CreateEmployee_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateMultipleEmployee",
			Handler:       _EmployeeService_CreateMultipleEmployee_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetEmployee",
			Handler:       _EmployeeService_GetEmployee_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/employee.proto",
}
